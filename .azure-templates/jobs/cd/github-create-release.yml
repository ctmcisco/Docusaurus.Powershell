# -----------------------------------------------------------------------------
# Continuous Deployment job that:
#
# 1. commits updated manifest to master with [no-release] commit message
# 2. then creates a Github Release with markdown changelog using gh-api
#
# IMPORTANT:
# - steps will not run if [no-release] is in the commit message
# - requires protected Azure Web Interface Pipeline Variables:
#   - `GITHUB_USERNAME`
#   - `GITHUB_PERSONAL_ACCESS_TOKEN`
# -----------------------------------------------------------------------------
parameters:
  dependsOn: []
  artifactName: ''
  artifactDownloadDirectory: $(Build.ArtifactStagingDirectory)

jobs:
  - job: Github
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      vmImage: 'windows-2019'
    workspace:
      clean: outputs

    variables:
      github_repo_url: "$(Build.Repository.Uri)"
      github_api_releases_url: "https://api.github.com/repos/$(Build.Repository.ID)/releases"

    steps:
    - template: ../../steps/log-virtual-machine-information.yml
    - template: ../../steps/cd/set-skip-release-variable.yml

    # -------------------------------------------------------------------------
    # log the template paramters for future debugging
    # -------------------------------------------------------------------------
    - powershell: |
        Write-Host "artifactName              = ${{ parameters.artifactName }}"
        Write-Host "artifactDownloadDirectory = ${{ parameters.artifactDownloadDirectory }}"
      displayName: 'Log Template Parameters'
      condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'True'))

    # -------------------------------------------------------------------------
    # make sure the required Azure web interface secret variables exist
    # -------------------------------------------------------------------------
    - powershell: |
        Write-Host "Making sure secret pipeline variable GITHUB_USERNAME is available"
        if($env:MAPPED_GITHUB_USERNAME -match 'GITHUB_USERNAME') {
          throw "Azure pipeline secret variable GITHUB_USERNAME does not exist. Are you sure that you have configured it using the Azure Devops web interface?"
        }

        Write-Host "Making sure secret pipeline variable GITHUB_PERSONAL_ACCESS_TOKEN is available"
        if($env:MAPPED_GITHUB_USERNAME -match 'GITHUB_PERSONAL_ACCESS_TOKEN') {
          throw "Azure pipeline secret variable GITHUB_PERSONAL_ACCESS_TOKEN does not exist. Are you sure that you have configured it using the Azure Devops web interface?"
        }
      displayName: 'Validate API Keys'
      condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'True'))
      env:
        MAPPED_GITHUB_USERNAME: $(GITHUB_USERNAME)
        MAPPED_GITHUB_PERSONAL_ACCESS_TOKEN: $(GITHUB_PERSONAL_ACCESS_TOKEN)

    # -------------------------------------------------------------------------
    # download the module artifact
    # -------------------------------------------------------------------------
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build Artifacts'
      condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'True'))
      inputs:
        artifactName: ${{ parameters.artifactName }}
        downloadPath: ${{ parameters.artifactDownloadDirectory }}

    # -------------------------------------------------------------------------
    # create environment variables by analyzing the module artifact
    # -------------------------------------------------------------------------
    - template: ../../steps/cd/create-variables-from-modules-artifact.yml
      parameters:
        artifactDownloadDirectory: ${{ parameters.artifactDownloadDirectory }}

    # -------------------------------------------------------------------------
    # commit updated manifest directly to master before tagging/creating the
    # release. IMPORTANT: committing the file to master will trigger another
    # full Pipeline run but because we are adding [no-release] to the commit
    # message, all PSGallery/Github publishing steps will be skipped.
    # -------------------------------------------------------------------------
    - powershell: |
        $commitMessage = "Bump manifest to $env:ARTIFACT_MODULE_VERSION [no-release]"
        $gitFolder = $env:BUILD_REPOSITORY_LOCALPATH
        $gitSourceFolder = Join-Path -Path $gitFolder -ChildPath "Source"

        Write-Host "Commit Message        = $commitMessage"
        Write-Host "Updated Manifest Path = $env:ARTIFACT_MANIFEST_PATH"
        Write-Host "Git Folder            = $gitFolder"
        Write-Host "Git Source Folder     = $gitSourceFolder"

        Write-Host "Files in Local Git Folder:"
        Set-Location $gitFolder
        Get-ChildItem

        Write-Host "Files in Local Git Source Folder:"
        Get-ChildItem -Path $gitSourceFolder

        Write-Host "Replacing Manifest with Artifact Version:"
        Copy-Item -Path $env:ARTIFACT_MANIFEST_PATH -Destination $gitSourceFolder

        Write-Host "New Manifest Content:"
        Get-Content (Join-Path -Path $gitSourceFolder -ChildPath $env:ARTIFACT_MANIFEST_NAME)

        Write-Host "Configuring Git Repo:"
        git checkout master
        git remote remove origin
        git remote add origin "https://$($env:MAPPED_GITHUB_USERNAME):$($env:MAPPED_GITHUB_PERSONAL_ACCESS_TOKEN)@github.com/$($env:BUILD_REPOSITORY_ID).git"
        git config --global core.safecrlf false # prevent CRLF/LF warnings stopping the pipeline
        git config --global user.name $env:MAPPED_GITHUB_USERNAME
        git config --global user.email "$($env:MAPPED_GITHUB_USERNAME)@users.noreply.github.com"

        Write-Host "Git Commit Updated Manifest:"
        git add "Source/$env:ARTIFACT_MANIFEST_NAME"
        git commit -m $commitMessage
        git push origin master --quiet
      displayName: 'Commit Updated Manifest'
      condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'True'))
      env:
        MAPPED_GITHUB_USERNAME: $(GITHUB_USERNAME)
        MAPPED_GITHUB_PERSONAL_ACCESS_TOKEN: $(GITHUB_PERSONAL_ACCESS_TOKEN)

    # -------------------------------------------------------------------------
    # create a new Github Release with markdown changelog (using api.github)
    # -------------------------------------------------------------------------
    - powershell: |
        Write-Host "Generating CHANGELOG:"
        $latestTagVersion = git describe --tags --abbrev=0
        $latestTagHash = git show-ref -s $latestTagVersion
        Write-Host "Previous Tag Version = $latestTagVersion"
        Write-Host "Previous Tag Hash    = $latestTagHash"

        [string]$markdownChangeLog = "## CHANGELOG`n"

        $logLines = git log "$($latestTagHash)...HEAD" --pretty=format:"%H%x09%h%x09%an%x09%s" --date=short
        $logLines | ForEach-Object {
            ($hash, $shortHash, $author, $message) = $_.Split("`t")

            # exclude commit messages matching this regex
            if ($message -match '^bump manifest|^merge\s') {
                Write-Host "=> excluding commit message '$message'"
                return
            }

            $hashLink = "[$shortHash]($env:GITHUB_REPO_URL/$hash)"
            $authorLink = "[$author](https://github.com/$author)"

            $markdownChangeLog += "`n- $message ($authorLink in $hashLink)"
        }

        $markdownChangeLog

        # prepare Github API call
        Write-Host "Preparing API call:"
        $base64EncodedCredentials =  [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $env:MAPPED_GITHUB_USERNAME, $env:MAPPED_GITHUB_PERSONAL_ACCESS_TOKEN)))

        $apiHeaders = @{
            Authorization = "Basic $base64EncodedCredentials"
        }

        $apiBody = @{
          name = "Release $env:ARTIFACT_MODULE_VERSION"
          tag_name = "$env:ARTIFACT_MODULE_VERSION"
          target_commitish = "master"
          body = $markdownChangeLog
          draft = $False
          prerelease = $False
        } | ConvertTo-Json

        # some logging
        Write-Host "URL = $env:GITHUB_API_RELEASES_URL"
        Write-Host "BODY = $apiBody"

        # create the release
        $apiResponse = Invoke-RestMethod -Method POST -Uri $env:GITHUB_API_RELEASES_URL -Headers $apiHeaders -Body "$apiBody" -ContentType "application/json;charset=utf-8"
        $apiResponse | Out-Host

      displayName: 'Create Github Release'
      condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'True'))
      env:
        MAPPED_GITHUB_USERNAME: $(GITHUB_USERNAME)
        MAPPED_GITHUB_PERSONAL_ACCESS_TOKEN: $(GITHUB_PERSONAL_ACCESS_TOKEN)
